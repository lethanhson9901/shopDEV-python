# path/filename: models/item_model.py

from bson import ObjectId
from pydantic import BaseModel, Field, root_validator, validator, HttpUrl
from enum import Enum
from typing import List, Optional
from src.utils.role_permissions import check_permission, Permission, Role
from src.models.category_enum_models import CategoryEnum

class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v):
        if not ObjectId.is_valid(v):
            raise ValueError(f"Invalid ObjectId: {v}")
        return ObjectId(v)

    @classmethod
    def __modify_schema__(cls, field_schema):
        field_schema.update(type="string")

class ItemState(str, Enum):
    ACTIVE = "active"
    DISCONTINUED = "discontinued"
    OUT_OF_STOCK = "out_of_stock"

class ItemAttributes(BaseModel):
    color: Optional[str] = None
    size: Optional[str] = None
    material: Optional[str] = None
    weight: Optional[float] = None

class ItemModel(BaseModel):
    id: Optional[PyObjectId] = Field(default_factory=PyObjectId, alias="_id", description="Autogenerated unique identifier.")
    name: str = Field(..., min_length=3, max_length=100, description="The name of the item.")
    thumbnail: Optional[HttpUrl] = Field(None, description="URL of the item's thumbnail image.")
    description: Optional[str] = Field(None, description="A brief item description.")
    price: float = Field(..., gt=0, description="Item price, must be positive.")
    stock_quantity: int = Field(..., ge=0, description="Stock quantity, non-negative.")
    category: Optional[CategoryEnum] = Field(None, description="Item category.")
    user: Optional[str] = Field(None, description="Identifier for the user who owns the item.")
    tags: List[str] = Field(default_factory=list, description="Searchable tags.", max_items=10)
    state: ItemState = Field(default=ItemState.ACTIVE, description="Current state of the item.")
    attributes: ItemAttributes = Field(default_factory=ItemAttributes, description="Detailed attributes specific to the item.")

    @validator('tags', pre=True)
    def ensure_tags_are_unique(cls, v):
        return list(set(v)) if isinstance(v, list) else v

    @root_validator(pre=True)
    def check_state_based_on_stock(cls, values):
        stock_quantity = values.get('stock_quantity', 0)
        state = values.get('state', ItemState.ACTIVE)
        if stock_quantity == 0 and state != ItemState.DISCONTINUED:
            values['state'] = ItemState.OUT_OF_STOCK
        return values

    class Config:
        anystr_strip_whitespace = True
        min_anystr_length = 1
        validate_assignment = True
        use_enum_values = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}  # Ensures ObjectId is serialized as a string

    def custom_json(self, **kwargs):
        # Custom method to generate JSON representation, ensuring _id is handled correctly
        return self.dict(by_alias=True, **kwargs)